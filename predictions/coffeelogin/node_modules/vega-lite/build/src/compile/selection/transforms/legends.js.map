{"version":3,"file":"legends.js","sourceRoot":"","sources":["../../../../../src/compile/selection/transforms/legends.ts"],"names":[],"mappings":"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","sourcesContent":["import {selector as parseSelector} from 'vega-event-selector';\nimport {TransformCompiler} from './transforms';\nimport {UnitModel} from '../../unit';\nimport {NonPositionScaleChannel} from '../../../channel';\nimport {LegendComponent} from '../../legend/component';\nimport {forEachSelection, SelectionComponent, TUPLE} from '..';\nimport {array, isString} from 'vega-util';\nimport {Stream, MergedStream} from 'vega';\nimport {SELECTION_ID, isLegendBinding, isLegendStreamBinding} from '../../../selection';\nimport * as log from '../../../log';\nimport {duplicate, varName} from '../../../util';\nimport {TUPLE_FIELDS} from './project';\nimport {TOGGLE} from './toggle';\n\nconst legendBindings: TransformCompiler = {\n  has: (selCmpt: SelectionComponent<'single' | 'multi'>) => {\n    const spec = selCmpt.resolve === 'global' && selCmpt.bind && isLegendBinding(selCmpt.bind);\n    const projLen = selCmpt.project.items.length === 1 && selCmpt.project.items[0].field !== SELECTION_ID;\n    if (spec && !projLen) {\n      log.warn(log.message.LEGEND_BINDINGS_PROJECT_LENGTH);\n    }\n\n    return spec && projLen;\n  },\n\n  parse: (model, selCmpt, selDef, origDef) => {\n    // Binding a selection to a legend disables default direct manipulation interaction.\n    // A user can choose to re-enable it by explicitly specifying triggering input events.\n    if (!origDef.on) delete selCmpt.events;\n    if (!origDef.clear) delete selCmpt.clear;\n\n    if (origDef.on || origDef.clear) {\n      const legendFilter = 'event.item && indexof(event.item.mark.role, \"legend\") < 0';\n      for (const evt of selCmpt.events) {\n        evt.filter = array(evt.filter ?? []);\n        if (evt.filter.indexOf(legendFilter) < 0) {\n          evt.filter.push(legendFilter);\n        }\n      }\n    }\n\n    const evt = isLegendStreamBinding(selCmpt.bind) ? selCmpt.bind.legend : 'click';\n    const stream: Stream[] = isString(evt) ? parseSelector(evt, 'view') : array(evt);\n    selCmpt.bind = {legend: {merge: stream}};\n  },\n\n  topLevelSignals: (model, selCmpt: SelectionComponent<'single' | 'multi'>, signals) => {\n    const selName = selCmpt.name;\n    const stream = isLegendStreamBinding(selCmpt.bind) && (selCmpt.bind.legend as MergedStream);\n    const markName = (name: string) => (s: Stream) => {\n      const ds = duplicate(s);\n      ds.markname = name;\n      return ds;\n    };\n\n    for (const proj of selCmpt.project.items) {\n      if (!proj.hasLegend) continue;\n      const prefix = `${proj.field}_legend`;\n      const sgName = `${selName}_${prefix}`;\n      const hasSignal = signals.filter(s => s.name === sgName);\n\n      if (hasSignal.length === 0) {\n        const events = stream.merge\n          .map(markName(`${prefix}_symbols`))\n          .concat(stream.merge.map(markName(`${prefix}_labels`)))\n          .concat(stream.merge.map(markName(`${prefix}_entries`)));\n\n        signals.unshift({\n          name: sgName,\n          ...(!selCmpt.init ? {value: null} : {}),\n          on: [\n            // Legend entries do not store values, so we need to walk the scenegraph to the symbol datum.\n            {events, update: 'datum.value || item().items[0].items[0].datum.value', force: true},\n            {events: stream.merge, update: `!event.item || !datum ? null : ${sgName}`, force: true}\n          ]\n        });\n      }\n    }\n\n    return signals;\n  },\n\n  signals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const tuple = signals.find(s => s.name === name + TUPLE);\n    const fields = name + TUPLE_FIELDS;\n    const values = proj.items.filter(p => p.hasLegend).map(p => varName(`${name}_${p.field}_legend`));\n    const valid = values.map(v => `${v} !== null`).join(' && ');\n    const update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;\n\n    if (selCmpt.events && values.length > 0) {\n      tuple.on.push({\n        events: values.map(signal => ({signal})),\n        update\n      });\n    } else if (values.length > 0) {\n      tuple.update = update;\n      delete tuple.value;\n      delete tuple.on;\n    }\n\n    const toggle = signals.find(s => s.name === name + TOGGLE);\n    const events = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\n    if (toggle) {\n      if (!selCmpt.events) toggle.on[0].events = events;\n      else toggle.on.push({...toggle.on[0], events});\n    }\n\n    return signals;\n  }\n};\n\nexport default legendBindings;\n\nexport function parseInteractiveLegend(\n  model: UnitModel,\n  channel: NonPositionScaleChannel,\n  legendCmpt: LegendComponent\n) {\n  const field = model.fieldDef(channel).field;\n  forEachSelection(model, selCmpt => {\n    const proj = selCmpt.project.hasField[field] ?? selCmpt.project.hasChannel[channel];\n    if (proj && legendBindings.has(selCmpt)) {\n      const legendSelections = legendCmpt.get('selections') ?? [];\n      legendSelections.push(selCmpt.name);\n      legendCmpt.set('selections', legendSelections, false);\n      proj.hasLegend = true;\n    }\n  });\n}\n"]}