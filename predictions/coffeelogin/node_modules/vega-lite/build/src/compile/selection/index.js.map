{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/compile/selection/index.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,cAAc,EAAE,WAAW,EAAC,MAAM,WAAW,CAAC;AACtD,OAAO,EAAC,cAAc,EAAC,MAAM,eAAe,CAAC;AAC7C,OAAO,EAML,YAAY,EAEb,MAAM,iBAAiB,CAAC;AAGzB,OAAO,EAAC,YAAY,EAAQ,MAAM,UAAU,CAAC;AAE7C,OAAO,QAAQ,MAAM,YAAY,CAAC;AAClC,OAAO,KAAK,MAAM,SAAS,CAAC;AAC5B,OAAO,MAAM,MAAM,UAAU,CAAC;AAI9B,MAAM,CAAC,MAAM,KAAK,GAAG,QAAQ,CAAC;AAC9B,MAAM,CAAC,MAAM,KAAK,GAAG,QAAQ,CAAC;AAC9B,MAAM,CAAC,MAAM,MAAM,GAAG,SAAS,CAAC;AAChC,MAAM,CAAC,MAAM,gBAAgB,GAAG,oBAAoB,CAAC;AACrD,MAAM,CAAC,MAAM,oBAAoB,GAAG,oBAAoB,CAAC;AAqCzD,MAAM,SAAS,GAA4B,EAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAC,CAAC;AAErE,MAAM,UAAU,gBAAgB,CAC9B,KAAY,EACZ,EAAmF;IAEnF,MAAM,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC;IAC7C,IAAI,UAAU,EAAE;QACd,KAAK,MAAM,IAAI,IAAI,UAAU,EAAE;YAC7B,IAAI,cAAc,CAAC,UAAU,EAAE,IAAI,CAAC,EAAE;gBACpC,MAAM,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;gBAC7B,MAAM,OAAO,GAAG,EAAE,CAAC,GAAG,EAAE,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC7C,IAAI,OAAO,KAAK,IAAI;oBAAE,MAAM;aAC7B;SACF;KACF;AACH,CAAC;AAED,SAAS,aAAa,CAAC,KAAY;IACjC,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IAC1B,OAAO,MAAM,EAAE;QACb,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE;YACxB,MAAM;SACP;QACD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;KACxB;IAED,OAAO,MAAoB,CAAC;AAC9B,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,KAAY,EAAE,EAAC,MAAM,EAAC,GAAG,EAAC,MAAM,EAAE,IAAI,EAAC;IAC9D,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC;IACzD,MAAM,UAAU,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;IACxC,IAAI,UAAU,EAAE;QACd,MAAM,EAAC,KAAK,EAAC,GAAG,UAAU,CAAC;QAC3B,KAAK,MAAM,OAAO,IAAI,cAAc,EAAE;YACpC,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;gBAClB,IAAI,IAAI,eAAe,OAAO,eAAe,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC;aAC3F;SACF;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,KAAY;IAC9C,IAAI,UAAU,GAAG,KAAK,CAAC;IACvB,gBAAgB,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE;QAChC,UAAU,GAAG,UAAU,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,KAAK,YAAY,CAAC,CAAC;IAC7F,CAAC,CAAC,CAAC;IACH,OAAO,UAAU,CAAC;AACpB,CAAC","sourcesContent":["import {Binding, NewSignal, Stream} from 'vega';\nimport {hasOwnProperty, stringValue} from 'vega-util';\nimport {FACET_CHANNELS} from '../../channel';\nimport {\n  BrushConfig,\n  SelectionInit,\n  SelectionInitInterval,\n  SelectionResolution,\n  SelectionType,\n  SELECTION_ID,\n  LegendBinding\n} from '../../selection';\nimport {Dict} from '../../util';\nimport {FacetModel} from '../facet';\nimport {isFacetModel, Model} from '../model';\nimport {UnitModel} from '../unit';\nimport interval from './interval';\nimport multi from './multi';\nimport single from './single';\nimport {SelectionProjection, SelectionProjectionComponent} from './transforms/project';\nimport {OutputNode} from '../data/dataflow';\n\nexport const STORE = '_store';\nexport const TUPLE = '_tuple';\nexport const MODIFY = '_modify';\nexport const SELECTION_DOMAIN = '_selection_domain_';\nexport const VL_SELECTION_RESOLVE = 'vlSelectionResolve';\n\nexport interface SelectionComponent<T extends SelectionType = SelectionType> {\n  name: string;\n  type: T;\n  // Use conditional types for stricter type of init (as the type of init depends on selection type).\n  init?: (T extends 'interval'\n    ? SelectionInitInterval\n    : T extends 'single'\n    ? SelectionInit\n    : T extends 'multi'\n    ? SelectionInit | SelectionInit[]\n    : never)[];\n  events: Stream[];\n  materialized: OutputNode;\n  bind?: 'scales' | Binding | Dict<Binding> | LegendBinding;\n  resolve: SelectionResolution;\n  empty: 'all' | 'none';\n  mark?: BrushConfig;\n\n  // Transforms\n  project?: SelectionProjectionComponent;\n  scales?: SelectionProjection[];\n  toggle?: any;\n  translate?: any;\n  zoom?: any;\n  nearest?: any;\n  clear?: any;\n}\n\nexport interface SelectionCompiler<T extends SelectionType = SelectionType> {\n  signals: (model: UnitModel, selCmpt: SelectionComponent<T>) => NewSignal[];\n  topLevelSignals?: (model: Model, selCmpt: SelectionComponent<T>, signals: NewSignal[]) => NewSignal[];\n  modifyExpr: (model: UnitModel, selCmpt: SelectionComponent<T>) => string;\n  marks?: (model: UnitModel, selCmpt: SelectionComponent<T>, marks: any[]) => any[];\n}\n\nconst compilers: Dict<SelectionCompiler> = {single, multi, interval};\n\nexport function forEachSelection(\n  model: Model,\n  cb: (selCmpt: SelectionComponent, selCompiler: SelectionCompiler) => void | boolean\n) {\n  const selections = model.component.selection;\n  if (selections) {\n    for (const name in selections) {\n      if (hasOwnProperty(selections, name)) {\n        const sel = selections[name];\n        const success = cb(sel, compilers[sel.type]);\n        if (success === true) break;\n      }\n    }\n  }\n}\n\nfunction getFacetModel(model: Model): FacetModel {\n  let parent = model.parent;\n  while (parent) {\n    if (isFacetModel(parent)) {\n      break;\n    }\n    parent = parent.parent;\n  }\n\n  return parent as FacetModel;\n}\n\nexport function unitName(model: Model, {escape} = {escape: true}) {\n  let name = escape ? stringValue(model.name) : model.name;\n  const facetModel = getFacetModel(model);\n  if (facetModel) {\n    const {facet} = facetModel;\n    for (const channel of FACET_CHANNELS) {\n      if (facet[channel]) {\n        name += ` + '__facet_${channel}_' + (facet[${stringValue(facetModel.vgField(channel))}])`;\n      }\n    }\n  }\n  return name;\n}\n\nexport function requiresSelectionId(model: Model) {\n  let identifier = false;\n  forEachSelection(model, selCmpt => {\n    identifier = identifier || selCmpt.project.items.some(proj => proj.field === SELECTION_ID);\n  });\n  return identifier;\n}\n"]}