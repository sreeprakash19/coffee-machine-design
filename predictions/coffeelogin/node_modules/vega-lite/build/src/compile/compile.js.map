{"version":3,"file":"compile.js","sourceRoot":"","sources":["../../../src/compile/compile.ts"],"names":[],"mappings":"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","sourcesContent":["import {AutoSizeType, LoggerInterface, Spec as VgSpec} from 'vega';\nimport {isString, mergeConfig} from 'vega-util';\nimport {getPositionScaleChannel} from '../channel';\nimport * as vlFieldDef from '../channeldef';\nimport {initConfig, stripAndRedirectConfig} from '../config';\nimport * as log from '../log';\nimport {normalize} from '../normalize';\nimport {LayoutSizeMixins, TopLevel, TopLevelSpec} from '../spec';\nimport {\n  AutoSizeParams,\n  Datasets,\n  extractTopLevelProperties,\n  getFitType,\n  isFitType,\n  TopLevelProperties\n} from '../spec/toplevel';\nimport {keys} from '../util';\nimport {Config} from './../config';\nimport {buildModel} from './buildmodel';\nimport {assembleRootData} from './data/assemble';\nimport {optimizeDataflow} from './data/optimize';\nimport {Model} from './model';\n\n// import {draw} from './data/debug';\n\nexport interface CompileOptions {\n  /**\n   * Sets a Vega-Lite configuration.\n   */\n  config?: Config;\n\n  /**\n   * Sets a custom logger.\n   */\n  logger?: LoggerInterface;\n\n  /**\n   * Sets a field title formatter.\n   */\n  fieldTitle?: vlFieldDef.FieldTitleFormatter;\n}\n\n/**\n * Vega-Lite's main function, for compiling Vega-Lite spec into Vega spec.\n *\n * At a high-level, we make the following transformations in different phases:\n *\n * Input spec\n *     |\n *     |  (Normalization)\n *     v\n * Normalized Spec (Row/Column channels in single-view specs becomes faceted specs, composite marks becomes layered specs.)\n *     |\n *     |  (Build Model)\n *     v\n * A model tree of the spec\n *     |\n *     |  (Parse)\n *     v\n * A model tree with parsed components (intermediate structure of visualization primitives in a format that can be easily merged)\n *     |\n *     | (Optimize)\n *     v\n * A model tree with parsed components with the data component optimized\n *     |\n *     | (Assemble)\n *     v\n * Vega spec\n *\n * @param inputSpec The Vega-Lite specification.\n * @param opt       Optional arguments passed to the Vega-Lite compiler.\n * @returns         An object containing the compiled Vega spec and normalized Vega-Lite spec.\n */\nexport function compile(inputSpec: TopLevelSpec, opt: CompileOptions = {}) {\n  // 0. Augment opt with default opts\n  if (opt.logger) {\n    // set the singleton logger to the provided logger\n    log.set(opt.logger);\n  }\n\n  if (opt.fieldTitle) {\n    // set the singleton field title formatter\n    vlFieldDef.setTitleFormatter(opt.fieldTitle);\n  }\n\n  try {\n    // 1. Initialize config by deep merging default config with the config provided via option and the input spec.\n    const config = initConfig(mergeConfig({}, opt.config, inputSpec.config));\n\n    // 2. Normalize: Convert input spec -> normalized spec\n\n    // - Decompose all extended unit specs into composition of unit spec. For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.\n    // - Normalize autosize and width or height spec\n    const spec = normalize(inputSpec, config);\n\n    // 3. Build Model: normalized spec -> Model (a tree structure)\n\n    // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.\n    // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, RepeatModel, ConcatModel) for different types of models.\n    const model: Model = buildModel(spec, null, '', undefined, undefined, config);\n\n    // 4 Parse: Model --> Model with components\n\n    // Note that components = intermediate representations that are equivalent to Vega specs.\n    // We need these intermediate representation because we need to merge many visualization \"components\" like projections, scales, axes, and legends.\n    // We will later convert these components into actual Vega specs in the assemble phase.\n\n    // In this phase, we do a bottom-up traversal over the whole tree to\n    // parse for each type of components once (e.g., data, layout, mark, scale).\n    // By doing bottom-up traversal, we start parsing components of unit specs and\n    // then merge child components of parent composite specs.\n    //\n    // Please see inside model.parse() for order of different components parsed.\n    model.parse();\n\n    // draw(model.component.data.sources);\n\n    // 5. Optimize the dataflow. This will modify the data component of the model.\n    optimizeDataflow(model.component.data, model);\n\n    // 6. Assemble: convert model components --> Vega Spec.\n    const vgSpec = assembleTopLevelModel(\n      model,\n      getTopLevelProperties(inputSpec, spec.autosize, config, model),\n      inputSpec.datasets,\n      inputSpec.usermeta\n    );\n\n    return {\n      spec: vgSpec,\n      normalized: spec\n    };\n  } finally {\n    // Reset the singleton logger if a logger is provided\n    if (opt.logger) {\n      log.reset();\n    }\n    // Reset the singleton field title formatter if provided\n    if (opt.fieldTitle) {\n      vlFieldDef.resetTitleFormatter();\n    }\n  }\n}\n\nfunction getTopLevelProperties(\n  inputSpec: TopLevel<any>,\n  autosize: AutoSizeType | AutoSizeParams,\n  config: Config,\n  model: Model\n) {\n  const width = model.component.layoutSize.get('width');\n  const height = model.component.layoutSize.get('height');\n  if (autosize === undefined) {\n    autosize = {type: 'pad'};\n  } else if (isString(autosize)) {\n    autosize = {type: autosize};\n  }\n  if (width && height && isFitType(autosize.type)) {\n    if (width === 'step' && height === 'step') {\n      log.warn(log.message.droppingFit());\n      autosize.type = 'pad';\n    } else if (width === 'step' || height === 'step') {\n      // effectively XOR, because else if\n\n      // get step dimension\n      const sizeType = width === 'step' ? 'width' : 'height';\n      // log that we're dropping fit for respective channel\n      log.warn(log.message.droppingFit(getPositionScaleChannel(sizeType)));\n\n      // setting type to inverse fit (so if we dropped fit-x, type is now fit-y)\n      const inverseSizeType = sizeType === 'width' ? 'height' : 'width';\n      autosize.type = getFitType(inverseSizeType);\n    }\n  }\n\n  return {\n    ...(keys(autosize).length === 1 && autosize.type\n      ? autosize.type === 'pad'\n        ? {}\n        : {autosize: autosize.type}\n      : {autosize}),\n    ...extractTopLevelProperties(config),\n    ...extractTopLevelProperties(inputSpec)\n  };\n}\n\n/*\n * Assemble the top-level model to a Vega spec.\n *\n * Note: this couldn't be `model.assemble()` since the top-level model\n * needs some special treatment to generate top-level properties.\n */\nfunction assembleTopLevelModel(\n  model: Model,\n  topLevelProperties: TopLevelProperties & LayoutSizeMixins,\n  datasets: Datasets = {},\n  usermeta: object\n): VgSpec {\n  // Config with Vega-Lite only config removed.\n  const vgConfig = model.config ? stripAndRedirectConfig(model.config) : undefined;\n\n  const data = [].concat(\n    model.assembleSelectionData([]),\n    // only assemble data in the root\n    assembleRootData(model.component.data, datasets)\n  );\n\n  const projections = model.assembleProjections();\n  const title = model.assembleTitle();\n  const style = model.assembleGroupStyle();\n  const encodeEntry = model.assembleGroupEncodeEntry(true);\n\n  let layoutSignals = model.assembleLayoutSignals();\n\n  // move width and height signals with values to top level\n  layoutSignals = layoutSignals.filter(signal => {\n    if ((signal.name === 'width' || signal.name === 'height') && signal.value !== undefined) {\n      topLevelProperties[signal.name] = +signal.value;\n      return false;\n    }\n    return true;\n  });\n\n  return {\n    $schema: 'https://vega.github.io/schema/vega/v5.json',\n    ...(model.description ? {description: model.description} : {}),\n    ...topLevelProperties,\n    ...(title ? {title} : {}),\n    ...(style ? {style} : {}),\n    ...(encodeEntry ? {encode: {update: encodeEntry}} : {}),\n    data,\n    ...(projections.length > 0 ? {projections: projections} : {}),\n    ...model.assembleGroup([...layoutSignals, ...model.assembleSelectionTopLevelSignals([])]),\n    ...(vgConfig ? {config: vgConfig} : {}),\n    ...(usermeta ? {usermeta} : {})\n  };\n}\n"]}