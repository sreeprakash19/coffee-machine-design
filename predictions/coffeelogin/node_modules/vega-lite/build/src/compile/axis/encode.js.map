{"version":3,"file":"encode.js","sourceRoot":"","sources":["../../../../src/compile/axis/encode.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,oBAAoB,EAAC,MAAM,kBAAkB,CAAC;AACtD,OAAO,EAAC,SAAS,EAAC,MAAM,aAAa,CAAC;AACtC,OAAO,EAAC,IAAI,EAAC,MAAM,YAAY,CAAC;AAChC,OAAO,EAAC,oBAAoB,EAAC,MAAM,WAAW,CAAC;AAG/C,MAAM,UAAU,MAAM,CAAC,KAAgB,EAAE,OAA6B,EAAE,mBAAwB;;IAC9F,MAAM,QAAQ,SACZ,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,uCACvB,CAAC,OAAO,KAAK,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,KAAK,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,EAAA,CAAC;IAChG,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAEjC,IAAI,UAAU,GAAQ,EAAE,CAAC;IAEzB,gJAAgJ;IAChJ,IAAI,oBAAoB,CAAC,QAAQ,CAAC,EAAE;QAClC,MAAM,UAAU,GAAG,KAAK,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,SAAS,CAAC,GAAG,CAAC;QAElF,MAAM,IAAI,GAAG,oBAAoB,CAAC,aAAa,EAAE,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;QAEnG,IAAI,IAAI,EAAE;YACR,UAAU,CAAC,IAAI,GAAG,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC;SAClC;KACF;IAED,UAAU,mCACL,UAAU,GACV,mBAAmB,CACvB,CAAC;IAEF,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC;AAChE,CAAC","sourcesContent":["import {PositionScaleChannel} from '../../channel';\nimport {isTimeFormatFieldDef} from '../../channeldef';\nimport {ScaleType} from '../../scale';\nimport {keys} from '../../util';\nimport {timeFormatExpression} from '../common';\nimport {UnitModel} from '../unit';\n\nexport function labels(model: UnitModel, channel: PositionScaleChannel, specifiedLabelsSpec: any) {\n  const fieldDef =\n    model.fieldDef(channel) ??\n    (channel === 'x' ? model.fieldDef('x2') : channel === 'y' ? model.fieldDef('y2') : undefined);\n  const axis = model.axis(channel);\n\n  let labelsSpec: any = {};\n\n  // We use a label encoding instead of setting the `format` property because Vega does not let us determine how the format should be interpreted.\n  if (isTimeFormatFieldDef(fieldDef)) {\n    const isUTCScale = model.getScaleComponent(channel).get('type') === ScaleType.UTC;\n\n    const expr = timeFormatExpression('datum.value', fieldDef.timeUnit, axis.format, null, isUTCScale);\n\n    if (expr) {\n      labelsSpec.text = {signal: expr};\n    }\n  }\n\n  labelsSpec = {\n    ...labelsSpec,\n    ...specifiedLabelsSpec\n  };\n\n  return keys(labelsSpec).length === 0 ? undefined : labelsSpec;\n}\n"]}