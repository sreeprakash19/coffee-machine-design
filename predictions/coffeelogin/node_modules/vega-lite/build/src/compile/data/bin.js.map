{"version":3,"file":"bin.js","sourceRoot":"","sources":["../../../../src/compile/data/bin.ts"],"names":[],"mappings":"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","sourcesContent":["import {BinTransform as VgBinTransform, Transforms as VgTransform} from 'vega';\nimport {isString} from 'vega-util';\nimport {BinParams, binToString, isBinning, isSelectionExtent} from '../../bin';\nimport {Channel} from '../../channel';\nimport {binRequiresRange, FieldName, isTypedFieldDef, normalizeBin, TypedFieldDef, vgField} from '../../channeldef';\nimport {Config} from '../../config';\nimport {BinTransform} from '../../transform';\nimport {Dict, duplicate, hash, keys, replacePathInField, unique, vals, varName} from '../../util';\nimport {binFormatExpression} from '../common';\nimport {isUnitModel, Model, ModelWithField} from '../model';\nimport {parseSelectionBinExtent} from '../selection/parse';\nimport {DataFlowNode} from './dataflow';\n\nfunction rangeFormula(model: ModelWithField, fieldDef: TypedFieldDef<string>, channel: Channel, config: Config) {\n  if (binRequiresRange(fieldDef, channel)) {\n    // read format from axis or legend, if there is no format then use config.numberFormat\n\n    const guide = isUnitModel(model) ? model.axis(channel) ?? model.legend(channel) ?? {} : {};\n\n    const startField = vgField(fieldDef, {expr: 'datum'});\n    const endField = vgField(fieldDef, {expr: 'datum', binSuffix: 'end'});\n\n    return {\n      formulaAs: vgField(fieldDef, {binSuffix: 'range', forAs: true}),\n      formula: binFormatExpression(startField, endField, guide.format, config)\n    };\n  }\n  return {};\n}\n\nfunction binKey(bin: BinParams, field: string) {\n  return `${binToString(bin)}_${field}`;\n}\n\nfunction getSignalsFromModel(model: Model, key: string) {\n  return {\n    signal: model.getName(`${key}_bins`),\n    extentSignal: model.getName(`${key}_extent`)\n  };\n}\n\nexport function getBinSignalName(model: Model, field: string, bin: boolean | BinParams) {\n  const normalizedBin = normalizeBin(bin, undefined) ?? {};\n  const key = binKey(normalizedBin, field);\n  return model.getName(`${key}_bins`);\n}\n\nfunction isBinTransform(t: TypedFieldDef<string> | BinTransform): t is BinTransform {\n  return 'as' in t;\n}\n\nfunction createBinComponent(t: TypedFieldDef<string> | BinTransform, bin: boolean | BinParams, model: Model) {\n  let as: [string, string];\n  let span: string;\n\n  if (isBinTransform(t)) {\n    as = isString(t.as) ? [t.as, `${t.as}_end`] : [t.as[0], t.as[1]];\n  } else {\n    as = [vgField(t, {forAs: true}), vgField(t, {binSuffix: 'end', forAs: true})];\n  }\n\n  const normalizedBin = {...normalizeBin(bin, undefined)};\n  const key = binKey(normalizedBin, t.field);\n  const {signal, extentSignal} = getSignalsFromModel(model, key);\n\n  if (isSelectionExtent(normalizedBin.extent)) {\n    const ext = normalizedBin.extent;\n    const selName = ext.selection;\n    span = parseSelectionBinExtent(model.getSelectionComponent(varName(selName), selName), ext);\n    delete normalizedBin.extent; // Vega-Lite selection extent map to Vega's span property.\n  }\n\n  const binComponent: BinComponent = {\n    bin: normalizedBin,\n    field: t.field,\n    as: [as],\n    ...(signal ? {signal} : {}),\n    ...(extentSignal ? {extentSignal} : {}),\n    ...(span ? {span} : {})\n  };\n\n  return {key, binComponent};\n}\n\nexport interface BinComponent {\n  bin: BinParams;\n  field: FieldName;\n  extentSignal?: string;\n  signal?: string;\n  span?: string;\n\n  /** Pairs of strings of the names of start and end signals */\n  as: [string, string][];\n\n  // Range Formula\n\n  formula?: string;\n  formulaAs?: string;\n}\n\nexport class BinNode extends DataFlowNode {\n  public clone() {\n    return new BinNode(null, duplicate(this.bins));\n  }\n\n  constructor(parent: DataFlowNode, private bins: Dict<BinComponent>) {\n    super(parent);\n  }\n\n  public static makeFromEncoding(parent: DataFlowNode, model: ModelWithField) {\n    const bins = model.reduceFieldDef((binComponentIndex: Dict<BinComponent>, fieldDef, channel) => {\n      if (isTypedFieldDef(fieldDef) && isBinning(fieldDef.bin)) {\n        const {key, binComponent} = createBinComponent(fieldDef, fieldDef.bin, model);\n        binComponentIndex[key] = {\n          ...binComponent,\n          ...binComponentIndex[key],\n          ...rangeFormula(model, fieldDef, channel, model.config)\n        };\n      }\n      return binComponentIndex;\n    }, {} as Dict<BinComponent>);\n\n    if (keys(bins).length === 0) {\n      return null;\n    }\n\n    return new BinNode(parent, bins);\n  }\n\n  /**\n   * Creates a bin node from BinTransform.\n   * The optional parameter should provide\n   */\n  public static makeFromTransform(parent: DataFlowNode, t: BinTransform, model: Model) {\n    const {key, binComponent} = createBinComponent(t, t.bin, model);\n    return new BinNode(parent, {\n      [key]: binComponent\n    });\n  }\n\n  /**\n   * Merge bin nodes. This method either integrates the bin config from the other node\n   * or if this node already has a bin config, renames the corresponding signal in the model.\n   */\n  public merge(other: BinNode, renameSignal: (s1: string, s2: string) => void) {\n    for (const key of keys(other.bins)) {\n      if (key in this.bins) {\n        renameSignal(other.bins[key].signal, this.bins[key].signal);\n        // Ensure that we don't have duplicate names for signal pairs\n        this.bins[key].as = unique([...this.bins[key].as, ...other.bins[key].as], hash);\n      } else {\n        this.bins[key] = other.bins[key];\n      }\n    }\n\n    for (const child of other.children) {\n      other.removeChild(child);\n      child.parent = this;\n    }\n    other.remove();\n  }\n\n  public producedFields() {\n    return new Set(\n      vals(this.bins)\n        .map(c => c.as)\n        .flat(2)\n    );\n  }\n\n  public dependentFields() {\n    return new Set(vals(this.bins).map(c => c.field));\n  }\n\n  public hash() {\n    return `Bin ${hash(this.bins)}`;\n  }\n\n  public assemble(): VgTransform[] {\n    return vals(this.bins).flatMap(bin => {\n      const transform: VgTransform[] = [];\n\n      const [binAs, ...remainingAs] = bin.as;\n      const {extent, ...params} = bin.bin;\n      const binTrans: VgBinTransform = {\n        type: 'bin',\n        field: replacePathInField(bin.field),\n        as: binAs,\n        signal: bin.signal,\n        ...(!isSelectionExtent(extent) ? {extent} : {extent: null}),\n        ...(bin.span ? {span: {signal: `span(${bin.span})`}} : {}),\n        ...params\n      };\n\n      if (!extent && bin.extentSignal) {\n        transform.push({\n          type: 'extent',\n          field: replacePathInField(bin.field),\n          signal: bin.extentSignal\n        });\n        binTrans.extent = {signal: bin.extentSignal};\n      }\n\n      transform.push(binTrans);\n\n      for (const as of remainingAs) {\n        for (let i = 0; i < 2; i++) {\n          transform.push({\n            type: 'formula',\n            expr: vgField({field: binAs[i]}, {expr: 'datum'}),\n            as: as[i]\n          });\n        }\n      }\n\n      if (bin.formula) {\n        transform.push({\n          type: 'formula',\n          expr: bin.formula,\n          as: bin.formulaAs\n        });\n      }\n      return transform;\n    });\n  }\n}\n"]}