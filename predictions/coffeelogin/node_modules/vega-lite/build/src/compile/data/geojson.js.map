{"version":3,"file":"geojson.js","sourceRoot":"","sources":["../../../../src/compile/data/geojson.ts"],"names":[],"mappings":"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","sourcesContent":["import {GeoJSONTransform as VgGeoJSONTransform, Vector2} from 'vega';\nimport {isString} from 'vega-util';\nimport {GeoPositionChannel, LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, SHAPE} from '../../channel';\nimport {isValueDef, ValueDef} from '../../channeldef';\nimport {GEOJSON} from '../../type';\nimport {duplicate, hash} from '../../util';\nimport {VgExprRef} from '../../vega.schema';\nimport {UnitModel} from '../unit';\nimport {DataFlowNode} from './dataflow';\n\nexport class GeoJSONNode extends DataFlowNode {\n  public clone() {\n    return new GeoJSONNode(null, duplicate(this.fields), this.geojson, this.signal);\n  }\n\n  public static parseAll(parent: DataFlowNode, model: UnitModel): DataFlowNode {\n    if (model.component.projection && !model.component.projection.isFit) {\n      return parent;\n    }\n\n    let geoJsonCounter = 0;\n\n    for (const coordinates of [\n      [LONGITUDE, LATITUDE],\n      [LONGITUDE2, LATITUDE2]\n    ] as Vector2<GeoPositionChannel>[]) {\n      const pair = coordinates.map(channel =>\n        model.channelHasField(channel)\n          ? model.fieldDef(channel).field\n          : isValueDef(model.encoding[channel])\n          ? {expr: (model.encoding[channel] as ValueDef<number>).value + ''}\n          : undefined\n      ) as [GeoPositionChannel, GeoPositionChannel];\n\n      if (pair[0] || pair[1]) {\n        parent = new GeoJSONNode(parent, pair, null, model.getName(`geojson_${geoJsonCounter++}`));\n      }\n    }\n\n    if (model.channelHasField(SHAPE)) {\n      const fieldDef = model.fieldDef(SHAPE);\n      if (fieldDef.type === GEOJSON) {\n        parent = new GeoJSONNode(parent, null, fieldDef.field, model.getName(`geojson_${geoJsonCounter++}`));\n      }\n    }\n\n    return parent;\n  }\n\n  constructor(\n    parent: DataFlowNode,\n    private fields?: Vector2<string | VgExprRef>,\n    private geojson?: string,\n    private signal?: string\n  ) {\n    super(parent);\n  }\n\n  public dependentFields() {\n    const fields = (this.fields ?? []).filter(isString) as string[];\n    return new Set([...(this.geojson ? [this.geojson] : []), ...fields]);\n  }\n\n  public producedFields() {\n    return new Set<string>();\n  }\n\n  public hash() {\n    return `GeoJSON ${this.geojson} ${this.signal} ${hash(this.fields)}`;\n  }\n\n  public assemble(): VgGeoJSONTransform {\n    return {\n      type: 'geojson',\n      ...(this.fields ? {fields: this.fields} : {}),\n      ...(this.geojson ? {geojson: this.geojson} : {}),\n      signal: this.signal\n    };\n  }\n}\n"]}