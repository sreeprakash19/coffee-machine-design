{"version":3,"file":"quantile.js","sourceRoot":"","sources":["../../../../src/compile/data/quantile.ts"],"names":[],"mappings":";AAEA,OAAO,EAAC,SAAS,EAAE,IAAI,EAAC,MAAM,YAAY,CAAC;AAC3C,OAAO,EAAC,YAAY,EAAC,MAAM,YAAY,CAAC;AAExC;;GAEG;AACH,MAAM,OAAO,qBAAsB,SAAQ,YAAY;IAKrD,YAAY,MAAoB,EAAU,SAA4B;;QACpE,KAAK,CAAC,MAAM,CAAC,CAAC;QAD0B,cAAS,GAAT,SAAS,CAAmB;QAEpE,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,oCAAoC;QAC3E,MAAM,WAAW,SAAG,IAAI,CAAC,SAAS,CAAC,EAAE,uCAAI,CAAC,SAAS,EAAE,SAAS,CAAC,EAAA,CAAC;QAChE,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,OAAC,WAAW,CAAC,CAAC,CAAC,uCAAI,MAAM,UAAE,WAAW,CAAC,CAAC,CAAC,uCAAI,OAAO,GAAC,CAAC;IAC5E,CAAC;IATM,KAAK;QACV,OAAO,IAAI,qBAAqB,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IACpE,CAAC;IASM,eAAe;;QACpB,OAAO,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,GAAG,MAAC,IAAI,CAAC,SAAS,CAAC,OAAO,uCAAI,EAAE,EAAC,CAAC,CAAC,CAAC;IAC/E,CAAC;IAEM,cAAc;QACnB,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;IACpC,CAAC;IAEM,IAAI;QACT,OAAO,qBAAqB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;IACrD,CAAC;IAEM,QAAQ;QACb,MAAM,mBAAoC,EAApC,EAAC,QAAQ,OAA2B,EAAzB,+BAAyB,CAAC;QAC3C,MAAM,MAAM,mBACV,IAAI,EAAE,UAAU,EAChB,KAAK,EAAE,QAAQ,IACZ,IAAI,CACR,CAAC;QACF,OAAO,MAAM,CAAC;IAChB,CAAC;CACF","sourcesContent":["import {QuantileTransform as VgQuantileTransform} from 'vega';\nimport {QuantileTransform} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for quantile transform nodes\n */\nexport class QuantileTransformNode extends DataFlowNode {\n  public clone() {\n    return new QuantileTransformNode(null, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private transform: QuantileTransform) {\n    super(parent);\n    this.transform = duplicate(transform); // duplicate to prevent side effects\n    const specifiedAs = this.transform.as ?? [undefined, undefined];\n    this.transform.as = [specifiedAs[0] ?? 'prob', specifiedAs[1] ?? 'value'];\n  }\n\n  public dependentFields() {\n    return new Set([this.transform.quantile, ...(this.transform.groupby ?? [])]);\n  }\n\n  public producedFields() {\n    return new Set(this.transform.as);\n  }\n\n  public hash() {\n    return `QuantileTransform ${hash(this.transform)}`;\n  }\n\n  public assemble(): VgQuantileTransform {\n    const {quantile, ...rest} = this.transform;\n    const result: VgQuantileTransform = {\n      type: 'quantile',\n      field: quantile,\n      ...rest\n    };\n    return result;\n  }\n}\n"]}