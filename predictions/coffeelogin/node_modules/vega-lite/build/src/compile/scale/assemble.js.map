{"version":3,"file":"assemble.js","sourceRoot":"","sources":["../../../../src/compile/scale/assemble.ts"],"names":[],"mappings":";AACA,OAAO,EAAC,IAAI,EAAC,MAAM,YAAY,CAAC;AAChC,OAAO,EAAC,aAAa,EAAmB,MAAM,mBAAmB,CAAC;AAClE,OAAO,EAAC,aAAa,EAAE,YAAY,EAAE,aAAa,EAAQ,MAAM,UAAU,CAAC;AAC3E,OAAO,EAAC,4BAA4B,EAAC,MAAM,uBAAuB,CAAC;AACnE,OAAO,EAAC,cAAc,EAAC,MAAM,UAAU,CAAC;AAExC,MAAM,UAAU,cAAc,CAAC,KAAY;IACzC,IAAI,YAAY,CAAC,KAAK,CAAC,IAAI,aAAa,CAAC,KAAK,CAAC,IAAI,aAAa,CAAC,KAAK,CAAC,EAAE;QACvE,8DAA8D;QAC9D,OAAO,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YAC7C,OAAO,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;QAC9C,CAAC,EAAE,sBAAsB,CAAC,KAAK,CAAC,CAAC,CAAC;KACnC;SAAM;QACL,uEAAuE;QACvE,+BAA+B;QAC/B,OAAO,sBAAsB,CAAC,KAAK,CAAC,CAAC;KACtC;AACH,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,KAAY;IACjD,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,MAAiB,EAAE,OAAqB,EAAE,EAAE;QACtF,MAAM,cAAc,GAAG,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACvD,IAAI,cAAc,CAAC,MAAM,EAAE;YACzB,wBAAwB;YACxB,OAAO,MAAM,CAAC;SACf;QAED,MAAM,KAAK,GAAG,cAAc,CAAC,OAAO,EAAE,CAAC;QACvC,MAAM,EAAC,IAAI,EAAE,IAAI,EAAE,eAAe,EAAE,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,KAAwB,KAAK,EAA3B,wFAA2B,CAAC;QACxF,MAAM,KAAK,GAAG,kBAAkB,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAE7D,IAAI,SAAS,CAAC;QACd,IAAI,eAAe,EAAE;YACnB,SAAS,GAAG,4BAA4B,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;SAClE;QAED,MAAM,MAAM,GAAG,cAAc,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAE9C,MAAM,CAAC,IAAI,2DACT,IAAI;YACJ,IAAI,IACD,CAAC,MAAM,CAAC,CAAC,CAAC,EAAC,MAAM,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GACxB,CAAC,SAAS,CAAC,CAAC,CAAC,EAAC,SAAS,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KACjC,KAAK,EAAE,KAAK,KACT,eAAe,EAClB,CAAC;QAEH,OAAO,MAAM,CAAC;IAChB,CAAC,EAAE,EAAe,CAAC,CAAC;AACtB,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,UAAmB,EAAE,SAAiB,EAAE,OAAgB;IACzF,2BAA2B;IAC3B,IAAI,OAAO,KAAK,GAAG,IAAI,OAAO,KAAK,GAAG,EAAE;QACtC,IAAI,aAAa,CAAC,UAAU,CAAC,EAAE;YAC7B,6FAA6F;YAC7F,OAAO;gBACL,IAAI,EAAE,EAAC,MAAM,EAAE,SAAS,GAAG,OAAO,EAAC;aACpC,CAAC;SACH;KACF;IACD,OAAO,UAAU,CAAC;AACpB,CAAC","sourcesContent":["import {Channel, ScaleChannel} from '../../channel';\nimport {keys} from '../../util';\nimport {isVgRangeStep, VgRange, VgScale} from '../../vega.schema';\nimport {isConcatModel, isLayerModel, isRepeatModel, Model} from '../model';\nimport {assembleSelectionScaleDomain} from '../selection/assemble';\nimport {assembleDomain} from './domain';\n\nexport function assembleScales(model: Model): VgScale[] {\n  if (isLayerModel(model) || isConcatModel(model) || isRepeatModel(model)) {\n    // For concat / layer / repeat, include scales of children too\n    return model.children.reduce((scales, child) => {\n      return scales.concat(assembleScales(child));\n    }, assembleScalesForModel(model));\n  } else {\n    // For facet, child scales would not be included in the parent's scope.\n    // For unit, there is no child.\n    return assembleScalesForModel(model);\n  }\n}\n\nexport function assembleScalesForModel(model: Model): VgScale[] {\n  return keys(model.component.scales).reduce((scales: VgScale[], channel: ScaleChannel) => {\n    const scaleComponent = model.component.scales[channel];\n    if (scaleComponent.merged) {\n      // Skipped merged scales\n      return scales;\n    }\n\n    const scale = scaleComponent.combine();\n    const {name, type, selectionExtent, domains: _d, range: _r, ...otherScaleProps} = scale;\n    const range = assembleScaleRange(scale.range, name, channel);\n\n    let domainRaw;\n    if (selectionExtent) {\n      domainRaw = assembleSelectionScaleDomain(model, selectionExtent);\n    }\n\n    const domain = assembleDomain(model, channel);\n\n    scales.push({\n      name,\n      type,\n      ...(domain ? {domain} : {}),\n      ...(domainRaw ? {domainRaw} : {}),\n      range: range,\n      ...otherScaleProps\n    });\n\n    return scales;\n  }, [] as VgScale[]);\n}\n\nexport function assembleScaleRange(scaleRange: VgRange, scaleName: string, channel: Channel): VgRange {\n  // add signals to x/y range\n  if (channel === 'x' || channel === 'y') {\n    if (isVgRangeStep(scaleRange)) {\n      // For width/height step, use a signal created in layout assemble instead of a constant step.\n      return {\n        step: {signal: scaleName + '_step'}\n      };\n    }\n  }\n  return scaleRange;\n}\n"]}