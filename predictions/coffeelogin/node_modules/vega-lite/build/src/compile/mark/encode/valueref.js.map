{"version":3,"file":"valueref.js","sourceRoot":"","sources":["../../../../../src/compile/mark/encode/valueref.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Utility files for producing Vega ValueRef for marks\n */\nimport {isFunction, isString} from 'vega-util';\nimport {isCountingAggregateOp} from '../../../aggregate';\nimport {isBinned, isBinning} from '../../../bin';\nimport {Channel, getMainRangeChannel, PositionChannel, X, X2, Y, Y2} from '../../../channel';\nimport {\n  binRequiresRange,\n  ChannelDef,\n  FieldDef,\n  FieldDefBase,\n  FieldName,\n  FieldRefOption,\n  getBand,\n  isFieldDef,\n  isPositionFieldDef,\n  isTypedFieldDef,\n  isValueDef,\n  SecondaryFieldDef,\n  TypedFieldDef,\n  ValueOrGradientOrText,\n  vgField\n} from '../../../channeldef';\nimport {Config} from '../../../config';\nimport * as log from '../../../log';\nimport {isPathMark, Mark, MarkDef} from '../../../mark';\nimport {fieldValidPredicate} from '../../../predicate';\nimport {hasDiscreteDomain, isContinuousToContinuous} from '../../../scale';\nimport {StackProperties} from '../../../stack';\nimport {QUANTITATIVE, TEMPORAL} from '../../../type';\nimport {contains, getFirstDefined} from '../../../util';\nimport {VgValueRef} from '../../../vega.schema';\nimport {ScaleComponent} from '../../scale/component';\n\nexport function midPointRefWithPositionInvalidTest(\n  params: MidPointParams & {\n    channel: PositionChannel;\n  }\n) {\n  const {channel, channelDef, markDef, scale} = params;\n  const ref = midPoint(params);\n\n  // Wrap to check if the positional value is invalid, if so, plot the point on the min value\n  if (\n    // Only this for field def without counting aggregate (as count wouldn't be null)\n    isFieldDef(channelDef) &&\n    !isCountingAggregateOp(channelDef.aggregate) &&\n    // and only for continuous scale without zero (otherwise, null / invalid will be interpreted as zero, which doesn't cause layout problem)\n    scale &&\n    isContinuousToContinuous(scale.get('type')) &&\n    scale.get('zero') === false\n  ) {\n    return wrapPositionInvalidTest({\n      fieldDef: channelDef,\n      channel,\n      markDef,\n      ref\n    });\n  }\n  return ref;\n}\n\nexport function wrapPositionInvalidTest({\n  fieldDef,\n  channel,\n  markDef,\n  ref\n}: {\n  fieldDef: FieldDef<string>;\n  channel: PositionChannel;\n  markDef: MarkDef<Mark>;\n  ref: VgValueRef;\n}): VgValueRef | VgValueRef[] {\n  if (!isPathMark(markDef.type)) {\n    // Only do this for non-path mark (as path marks will already use \"defined\" to skip points)\n\n    return [fieldInvalidTestValueRef(fieldDef, channel), ref];\n  }\n  return ref;\n}\n\nexport function fieldInvalidTestValueRef(fieldDef: FieldDef<string>, channel: PositionChannel) {\n  const test = fieldInvalidPredicate(fieldDef, true);\n  const mainChannel = getMainRangeChannel(channel) as 'x' | 'y';\n  const zeroValueRef = mainChannel === 'x' ? {value: 0} : {field: {group: 'height'}};\n\n  return {test, ...zeroValueRef};\n}\n\nexport function fieldInvalidPredicate(field: FieldName | FieldDef<string>, invalid = true) {\n  return fieldValidPredicate(isString(field) ? field : vgField(field, {expr: 'datum'}), !invalid);\n}\n\nexport function fieldRef(\n  fieldDef: FieldDefBase<string>,\n  scaleName: string,\n  opt: FieldRefOption,\n  encode: {offset?: number | VgValueRef; band?: number | boolean}\n): VgValueRef {\n  const ref: VgValueRef = {\n    ...(scaleName ? {scale: scaleName} : {}),\n    field: vgField(fieldDef, opt)\n  };\n\n  if (encode) {\n    const {offset, band} = encode;\n    return {\n      ...ref,\n      ...(offset ? {offset} : {}),\n      ...(band ? {band} : {})\n    };\n  }\n  return ref;\n}\n\n/**\n * Signal that returns the middle of a bin from start and end field. Should only be used with x and y.\n */\nexport function interpolatedSignalRef({\n  scaleName,\n  fieldDef,\n  fieldDef2,\n  offset,\n  startSuffix,\n  band = 0.5\n}: {\n  scaleName: string;\n  fieldDef: TypedFieldDef<string>;\n  fieldDef2?: SecondaryFieldDef<string>;\n  startSuffix?: string;\n  offset: number;\n  band: number;\n}) {\n  const expr = 0 < band && band < 1 ? 'datum' : undefined;\n  const start = vgField(fieldDef, {expr, suffix: startSuffix});\n  const end = fieldDef2 !== undefined ? vgField(fieldDef2, {expr}) : vgField(fieldDef, {suffix: 'end', expr});\n\n  if (band === 0) {\n    return {\n      scale: scaleName,\n      field: start,\n      ...(offset ? {offset} : {})\n    };\n  } else if (band === 1) {\n    return {\n      scale: scaleName,\n      field: end,\n      ...(offset ? {offset} : {})\n    };\n  } else {\n    const datum = `${band} * ${start} + ${1 - band} * ${end}`;\n\n    return {\n      signal: `scale(\"${scaleName}\", ${datum})`,\n      ...(offset ? {offset} : {})\n    };\n  }\n}\n\nexport interface MidPointParams {\n  channel: Channel;\n  channelDef: ChannelDef;\n  channel2Def?: ChannelDef<SecondaryFieldDef<string>>;\n\n  markDef: MarkDef<Mark>;\n  config: Config;\n\n  scaleName: string;\n  scale: ScaleComponent;\n  stack?: StackProperties;\n  offset?: number;\n  defaultRef: VgValueRef | (() => VgValueRef);\n}\n\n/**\n * @returns {VgValueRef} Value Ref for xc / yc or mid point for other channels.\n */\nexport function midPoint({\n  channel,\n  channelDef,\n  channel2Def,\n  markDef,\n  config,\n  scaleName,\n  scale,\n  stack,\n  offset,\n  defaultRef\n}: MidPointParams): VgValueRef {\n  // TODO: datum support\n  if (channelDef) {\n    /* istanbul ignore else */\n\n    if (isFieldDef(channelDef)) {\n      if (isTypedFieldDef(channelDef)) {\n        const band = getBand(channel, channelDef, channel2Def, markDef, config, {isMidPoint: true});\n\n        if (isBinning(channelDef.bin) || (band && channelDef.timeUnit)) {\n          // Use middle only for x an y to place marks in the center between start and end of the bin range.\n          // We do not use the mid point for other channels (e.g. size) so that properties of legends and marks match.\n          if (contains([X, Y], channel) && contains([QUANTITATIVE, TEMPORAL], channelDef.type)) {\n            if (stack && stack.impute) {\n              // For stack, we computed bin_mid so we can impute.\n              return fieldRef(channelDef, scaleName, {binSuffix: 'mid'}, {offset});\n            }\n            // For non-stack, we can just calculate bin mid on the fly using signal.\n            return interpolatedSignalRef({scaleName, fieldDef: channelDef, band, offset});\n          }\n          return fieldRef(channelDef, scaleName, binRequiresRange(channelDef, channel) ? {binSuffix: 'range'} : {}, {\n            offset\n          });\n        } else if (isBinned(channelDef.bin)) {\n          if (isFieldDef(channel2Def)) {\n            return interpolatedSignalRef({scaleName, fieldDef: channelDef, fieldDef2: channel2Def, band, offset});\n          } else {\n            const channel2 = channel === X ? X2 : Y2;\n            log.warn(log.message.channelRequiredForBinned(channel2));\n          }\n        }\n      }\n\n      if (scale) {\n        const scaleType = scale.get('type');\n        if (hasDiscreteDomain(scaleType)) {\n          if (scaleType === 'band') {\n            // For band, to get mid point, need to offset by half of the band\n            const band = getFirstDefined(isPositionFieldDef(channelDef) ? channelDef.band : undefined, 0.5);\n            return fieldRef(channelDef, scaleName, {binSuffix: 'range'}, {band, offset});\n          }\n          return fieldRef(channelDef, scaleName, {binSuffix: 'range'}, {offset});\n        }\n      }\n      return fieldRef(channelDef, scaleName, {}, {offset}); // no need for bin suffix\n    } else if (isValueDef(channelDef)) {\n      const value = channelDef.value;\n      const offsetMixins = offset ? {offset} : {};\n\n      return {...widthHeightValueRef(channel, value), ...offsetMixins};\n    }\n\n    // If channelDef is neither field def or value def, it's a condition-only def.\n    // In such case, we will use default ref.\n  }\n\n  const ref = isFunction(defaultRef) ? {...defaultRef(), ...(offset ? {offset} : {})} : defaultRef;\n\n  if (ref) {\n    // for non-position, ref could be undefined.\n    return {\n      ...ref,\n      // only include offset when it is non-zero (zero = no offset)\n      ...(offset ? {offset} : {})\n    };\n  }\n  return ref;\n}\n\n/**\n * Convert special \"width\" and \"height\" values in Vega-Lite into Vega value ref.\n */\nexport function widthHeightValueRef(channel: Channel, value: ValueOrGradientOrText) {\n  if (contains(['x', 'x2'], channel) && value === 'width') {\n    return {field: {group: 'width'}};\n  } else if (contains(['y', 'y2'], channel) && value === 'height') {\n    return {field: {group: 'height'}};\n  }\n  return {value};\n}\n"]}