{"version":3,"file":"position-rect.js","sourceRoot":"","sources":["../../../../../src/compile/mark/encode/position-rect.ts"],"names":[],"mappings":"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","sourcesContent":["import {isNumber} from 'vega-util';\nimport {isBinned, isBinning} from '../../../bin';\nimport {PositionChannel, X, X2, Y2} from '../../../channel';\nimport {\n  getBand,\n  getTypedFieldDef,\n  isFieldDef,\n  isPositionFieldDef,\n  isValueDef,\n  PositionFieldDef,\n  SecondaryFieldDef,\n  TypedFieldDef,\n  ValueDef\n} from '../../../channeldef';\nimport {Config, DEFAULT_STEP, getViewConfigDiscreteStep} from '../../../config';\nimport * as log from '../../../log';\nimport {Mark, MarkDef} from '../../../mark';\nimport {hasDiscreteDomain, ScaleType} from '../../../scale';\nimport {getFirstDefined} from '../../../util';\nimport {isVgRangeStep, VgEncodeEntry, VgValueRef} from '../../../vega.schema';\nimport {getMarkConfig} from '../../common';\nimport {ScaleComponent} from '../../scale/component';\nimport {UnitModel} from '../../unit';\nimport {nonPosition} from './nonposition';\nimport {alignedPositionChannel} from './position-align';\nimport {pointPosition} from './position-point';\nimport {rangePosition} from './position-range';\nimport * as ref from './valueref';\n\nexport function rectPosition(model: UnitModel, channel: 'x' | 'y', mark: 'bar' | 'rect' | 'image'): VgEncodeEntry {\n  const {config, encoding, markDef} = model;\n\n  const channel2 = channel === 'x' ? 'x2' : 'y2';\n  const sizeChannel = channel === 'x' ? 'width' : 'height';\n  const fieldDef = encoding[channel];\n  const fieldDef2 = encoding[channel2];\n\n  const scale = model.getScaleComponent(channel);\n  const scaleType = scale ? scale.get('type') : undefined;\n  const scaleName = model.scaleName(channel);\n\n  const orient = markDef.orient;\n  const hasSizeDef =\n    encoding[sizeChannel] ??\n    encoding.size ??\n    markDef[sizeChannel] ??\n    markDef.size ??\n    getMarkConfig('size', markDef, config, {vgChannel: sizeChannel});\n\n  const isBarBand = channel === 'x' ? orient === 'vertical' : orient === 'horizontal';\n\n  // x, x2, and width -- we must specify two of these in all conditions\n  if (\n    isFieldDef(fieldDef) &&\n    (isBinning(fieldDef.bin) || isBinned(fieldDef.bin) || (fieldDef.timeUnit && !fieldDef2)) &&\n    !hasSizeDef &&\n    !hasDiscreteDomain(scaleType)\n  ) {\n    const band = getBand(channel, fieldDef, undefined, markDef, config);\n\n    return rectBinPosition({\n      fieldDef,\n      fieldDef2,\n      channel,\n      markDef,\n      scaleName,\n      band,\n      spacing: getFirstDefined(markDef.binSpacing, config[mark].binSpacing),\n      reverse: scale.get('reverse')\n    });\n  } else if (((isFieldDef(fieldDef) && hasDiscreteDomain(scaleType)) || isBarBand) && !fieldDef2) {\n    // vertical\n    if (isFieldDef(fieldDef) && scaleType === ScaleType.BAND) {\n      const band = isPositionFieldDef(fieldDef) ? fieldDef.band : undefined;\n      return rectBandPosition(\n        fieldDef,\n        channel,\n        model,\n        defaultSizeRef(mark, markDef, sizeChannel, scaleName, scale, config, band)\n      );\n    }\n\n    // sized bin, normal point-ordinal axis, quantitative x-axis, or no x\n    return centeredPointPositionWithSize(\n      channel,\n      model,\n      defaultSizeRef(mark, markDef, sizeChannel, scaleName, scale, config)\n    );\n  } else {\n    return rangePosition(channel, model, {defaultPos: 'zeroOrMax', defaultPos2: 'zeroOrMin'});\n  }\n}\n\nfunction centeredPointPositionWithSize(channel: 'x' | 'y', model: UnitModel, sizeRef: VgValueRef) {\n  const centerChannel: 'xc' | 'yc' = channel === 'x' ? 'xc' : 'yc';\n  const sizeChannel = channel === 'x' ? 'width' : 'height';\n  return {\n    ...pointPosition(channel, model, {defaultPos: 'mid', vgChannel: centerChannel}),\n    ...nonPosition('size', model, {defaultRef: sizeRef, vgChannel: sizeChannel})\n  };\n}\n\nfunction defaultSizeRef(\n  mark: 'bar' | 'rect' | 'image',\n  markDef: MarkDef,\n  sizeChannel: 'width' | 'height',\n  scaleName: string,\n  scale: ScaleComponent,\n  config: Config,\n  band?: number\n): VgValueRef {\n  const markPropOrConfig = getFirstDefined(\n    markDef[sizeChannel],\n    markDef.size,\n    // TODO: deal with sizeChannel config\n    getMarkConfig('size', markDef, config, {vgChannel: sizeChannel})\n  );\n\n  if (markPropOrConfig !== undefined) {\n    return {value: markPropOrConfig};\n  }\n\n  if (scale) {\n    const scaleType = scale.get('type');\n    if (scaleType === 'point' || scaleType === 'band') {\n      if (config[mark].discreteBandSize !== undefined) {\n        return {value: config[mark].discreteBandSize};\n      }\n      if (scaleType === ScaleType.POINT) {\n        const scaleRange = scale.get('range');\n        if (isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {\n          return {value: scaleRange.step - 2};\n        }\n        return {value: DEFAULT_STEP - 2};\n      } else {\n        // BAND\n        return bandRef(scaleName, band);\n      }\n    } else {\n      // continuous scale\n      return {value: config[mark].continuousBandSize};\n    }\n  }\n  // No Scale\n\n  const step = getViewConfigDiscreteStep(config.view, sizeChannel);\n\n  const value = getFirstDefined(\n    // No scale is like discrete bar (with one item)\n    config[mark].discreteBandSize,\n    step - 2\n  );\n  return {value};\n}\n\nfunction bandRef(scaleName: string, band: number | boolean = true): VgValueRef {\n  return {\n    scale: scaleName,\n    band: band\n  };\n}\n\nfunction rectBandPosition(\n  fieldDef: PositionFieldDef<string>,\n  channel: 'x' | 'y',\n  model: UnitModel,\n  sizeRef?: VgValueRef\n) {\n  const scaleName = model.scaleName(channel);\n  const sizeChannel = channel === 'x' ? 'width' : 'height';\n  const {markDef, encoding, config} = model;\n\n  const vgChannel = alignedPositionChannel(channel, markDef, config);\n\n  const centeredBandPositionMixins = {\n    [vgChannel]: ref.fieldRef(fieldDef, scaleName, {}, {band: 0.5})\n  };\n\n  if (encoding.size || (markDef.size !== null && markDef.size !== undefined)) {\n    const orient = markDef.orient;\n    if (orient) {\n      if (getTypedFieldDef(encoding.size) || isValueDef(encoding.size)) {\n        return {\n          ...centeredBandPositionMixins,\n          ...nonPosition('size', model, {vgChannel: sizeChannel})\n        };\n      } else if (markDef.size !== undefined) {\n        return {\n          ...centeredBandPositionMixins,\n          [sizeChannel]: {value: markDef.size}\n        };\n      }\n    } else {\n      log.warn(log.message.cannotApplySizeToNonOrientedMark(markDef.type));\n    }\n  }\n\n  if (sizeRef?.value !== undefined) {\n    return {\n      ...centeredBandPositionMixins,\n      [sizeChannel]: sizeRef\n    };\n  }\n  const {band = 1} = fieldDef;\n\n  return {\n    // FIXME: make offset work correctly here when we support group bar (https://github.com/vega/vega-lite/issues/396)\n    [channel]: ref.fieldRef(fieldDef, scaleName, {binSuffix: 'range'}, {band: (1 - band) / 2}),\n    [sizeChannel]: sizeRef ?? bandRef(scaleName, band)\n  };\n}\n\nexport function rectBinPosition({\n  fieldDef,\n  fieldDef2,\n  channel,\n  band,\n  scaleName,\n  markDef,\n  spacing = 0,\n  reverse\n}: {\n  fieldDef: TypedFieldDef<string>;\n  fieldDef2?: ValueDef | SecondaryFieldDef<string>;\n  channel: 'x' | 'y';\n  band: number;\n  scaleName: string;\n  markDef: MarkDef<Mark>;\n  spacing?: number;\n  reverse: boolean;\n}) {\n  const binSpacing = {\n    x: reverse ? spacing : 0,\n    x2: reverse ? 0 : spacing,\n    y: reverse ? 0 : spacing,\n    y2: reverse ? spacing : 0\n  } as const;\n  const channel2 = channel === X ? X2 : Y2;\n  if (isBinning(fieldDef.bin) || fieldDef.timeUnit) {\n    return {\n      [channel2]: rectBinRef({\n        channel,\n        fieldDef,\n        scaleName,\n        markDef,\n        band: (1 - band) / 2,\n        offset: binSpacing[`${channel}2`]\n      }),\n      [channel]: rectBinRef({\n        channel,\n        fieldDef,\n        scaleName,\n        markDef,\n        band: 1 - (1 - band) / 2,\n        offset: binSpacing[channel]\n      })\n    };\n  } else if (isBinned(fieldDef.bin) && isFieldDef(fieldDef2)) {\n    return {\n      [channel2]: ref.fieldRef(fieldDef, scaleName, {}, {offset: binSpacing[`${channel}2`]}),\n      [channel]: ref.fieldRef(fieldDef2, scaleName, {}, {offset: binSpacing[channel]})\n    };\n  } else {\n    log.warn(log.message.channelRequiredForBinned(channel2));\n    return undefined;\n  }\n}\n\n/**\n * Value Ref for binned fields\n */\nexport function rectBinRef({\n  channel,\n  fieldDef,\n  scaleName,\n  markDef,\n  band,\n  offset\n}: {\n  channel: PositionChannel;\n  fieldDef: TypedFieldDef<string>;\n  scaleName: string;\n  markDef: MarkDef<Mark>;\n  band: number;\n  offset?: number;\n}) {\n  const r = ref.interpolatedSignalRef({\n    scaleName,\n    fieldDef,\n    band,\n    offset\n  });\n\n  return ref.wrapPositionInvalidTest({\n    fieldDef,\n    channel,\n    markDef,\n    ref: r\n  });\n}\n"]}