{"version":3,"file":"projection.js","sourceRoot":"","sources":["../../src/projection.ts"],"names":[],"mappings":"AAkFA,MAAM,CAAC,MAAM,qBAAqB,GAAyB;IACzD,MAAM;IACN,WAAW;IACX,YAAY;IACZ,QAAQ;IACR,QAAQ;IACR,WAAW;IACX,UAAU;IACV,UAAU;IACV,aAAa;IACb,UAAU;IACV,UAAU;IACV,OAAO;IACP,UAAU;IACV,QAAQ;IACR,OAAO;IACP,SAAS;IACT,MAAM;CACP,CAAC","sourcesContent":["import {Vector2, Vector3} from 'vega';\nimport {ProjectionType} from './vega.schema';\n\nexport interface Projection {\n  /**\n   * The cartographic projection to use. This value is case-insensitive, for example `\"albers\"` and `\"Albers\"` indicate the same projection type. You can find all valid projection types [in the documentation](https://vega.github.io/vega-lite/docs/projection.html#projection-types).\n   *\n   * __Default value:__ `mercator`\n   */\n  type?: ProjectionType;\n\n  /**\n   * The projection’s clipping circle radius to the specified angle in degrees. If `null`, switches to [antimeridian](http://bl.ocks.org/mbostock/3788999) cutting rather than small-circle clipping.\n   */\n  clipAngle?: number;\n\n  /**\n   * The projection’s viewport clip extent to the specified bounds in pixels. The extent bounds are specified as an array `[[x0, y0], [x1, y1]]`, where `x0` is the left-side of the viewport, `y0` is the top, `x1` is the right and `y1` is the bottom. If `null`, no viewport clipping is performed.\n   */\n  clipExtent?: Vector2<Vector2<number>>;\n\n  /**\n   * The projection's scale (zoom) value, overriding automatic fitting.\n   */\n  scale?: number;\n\n  /**\n   * The projection's translation (pan) value, overriding automatic fitting.\n   */\n  translate?: Vector2<number>;\n\n  /**\n   * The projection’s center to the specified center, a two-element array of longitude and latitude in degrees.\n   *\n   * __Default value:__ `[0, 0]`\n   */\n  center?: Vector2<number>;\n\n  /**\n   * The projection’s three-axis rotation to the specified angles, which must be a two- or three-element array of numbers [`lambda`, `phi`, `gamma`] specifying the rotation angles in degrees about each spherical axis. (These correspond to yaw, pitch and roll.)\n   *\n   * __Default value:__ `[0, 0, 0]`\n   */\n  rotate?: Vector2<number> | Vector3<number>;\n\n  /*\n   * The desired parallels of the projection.\n   */\n  parallels?: number[];\n\n  /**\n   * The threshold for the projection’s [adaptive resampling](http://bl.ocks.org/mbostock/3795544) to the specified value in pixels. This value corresponds to the [Douglas–Peucker distance](http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm). If precision is not specified, returns the projection’s current resampling precision which defaults to `√0.5 ≅ 0.70710…`.\n   */\n  precision?: number;\n\n  /*\n   * Sets whether or not the x-dimension is reflected (negated) in the output.\n   */\n  reflectX?: boolean;\n\n  /*\n   * Sets whether or not the y-dimension is reflected (negated) in the output.\n   */\n  reflectY?: boolean;\n\n  /* The following properties are all supported for specific types of projections. Consult the d3-geo-projection library for more information: https://github.com/d3/d3-geo-projection */\n  coefficient?: number;\n  distance?: number;\n  fraction?: number;\n  lobes?: number;\n  parallel?: number;\n  radius?: number;\n  ratio?: number;\n  spacing?: number;\n  tilt?: number;\n}\n\n/**\n * Any property of Projection can be in config\n */\nexport type ProjectionConfig = Projection;\n\nexport const PROJECTION_PROPERTIES: (keyof Projection)[] = [\n  'type',\n  'clipAngle',\n  'clipExtent',\n  'center',\n  'rotate',\n  'precision',\n  'reflectX',\n  'reflectY',\n  'coefficient',\n  'distance',\n  'fraction',\n  'lobes',\n  'parallel',\n  'radius',\n  'ratio',\n  'spacing',\n  'tilt'\n];\n"]}