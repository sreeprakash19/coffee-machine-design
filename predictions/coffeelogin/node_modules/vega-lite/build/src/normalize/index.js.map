{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/normalize/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {isString} from 'vega-util';\nimport {Config, initConfig} from '../config';\nimport * as log from '../log';\nimport {\n  ExtendedLayerSpec,\n  FacetedUnitSpec,\n  GenericSpec,\n  isLayerSpec,\n  isUnitSpec,\n  LayoutSizeMixins,\n  NormalizedSpec,\n  TopLevelSpec,\n  UnitSpec\n} from '../spec';\nimport {AutoSizeParams, AutosizeType, TopLevel} from '../spec/toplevel';\nimport {deepEqual} from '../util';\nimport {NormalizerParams} from './base';\nimport {CoreNormalizer} from './core';\n\nexport function normalize(\n  spec: TopLevelSpec & LayoutSizeMixins,\n  config?: Config\n): TopLevel<NormalizedSpec> & LayoutSizeMixins {\n  if (config === undefined) {\n    config = initConfig(spec.config);\n  }\n\n  const normalizedSpec = normalizeGenericSpec(spec, config);\n\n  const {width, height} = spec;\n  const autosize = normalizeAutoSize(normalizedSpec, {width, height, autosize: spec.autosize}, config);\n\n  return {\n    ...normalizedSpec,\n    ...(autosize ? {autosize} : {})\n  };\n}\n\nconst normalizer = new CoreNormalizer();\n\n/**\n * Decompose extended unit specs into composition of pure unit specs.\n */\nfunction normalizeGenericSpec(spec: GenericSpec<UnitSpec, ExtendedLayerSpec> | FacetedUnitSpec, config: Config = {}) {\n  return normalizer.map(spec, {config});\n}\n\nfunction _normalizeAutoSize(autosize: AutosizeType | AutoSizeParams) {\n  return isString(autosize) ? {type: autosize} : autosize ?? {};\n}\n\n/**\n * Normalize autosize and deal with width or height == \"container\".\n */\nexport function normalizeAutoSize(\n  spec: TopLevel<NormalizedSpec>,\n  sizeInfo: {autosize: AutosizeType | AutoSizeParams} & LayoutSizeMixins,\n  config?: Config\n) {\n  let {width, height} = sizeInfo;\n\n  const isFitCompatible = isUnitSpec(spec) || isLayerSpec(spec);\n  const autosizeDefault: AutoSizeParams = {};\n\n  if (!isFitCompatible) {\n    // If spec is not compatible with autosize == \"fit\", discard width/height == container\n    if (width == 'container') {\n      log.warn(log.message.containerSizeNonSingle('width'));\n      width = undefined;\n    }\n    if (height == 'container') {\n      log.warn(log.message.containerSizeNonSingle('height'));\n      height = undefined;\n    }\n  } else {\n    // Default autosize parameters to fit when width/height is \"container\"\n    if (width == 'container' && height == 'container') {\n      autosizeDefault.type = 'fit';\n      autosizeDefault.contains = 'padding';\n    } else if (width == 'container') {\n      autosizeDefault.type = 'fit-x';\n      autosizeDefault.contains = 'padding';\n    } else if (height == 'container') {\n      autosizeDefault.type = 'fit-y';\n      autosizeDefault.contains = 'padding';\n    }\n  }\n\n  const autosize: AutoSizeParams = {\n    type: 'pad',\n    ...autosizeDefault,\n    ...(config ? _normalizeAutoSize(config.autosize) : {}),\n    ..._normalizeAutoSize(spec.autosize)\n  };\n\n  if (autosize.type === 'fit' && !isFitCompatible) {\n    log.warn(log.message.FIT_NON_SINGLE);\n    autosize.type = 'pad';\n  }\n\n  if (width == 'container' && !(autosize.type == 'fit' || autosize.type == 'fit-x')) {\n    log.warn(log.message.containerSizeNotCompatibleWithAutosize('width'));\n  }\n  if (height == 'container' && !(autosize.type == 'fit' || autosize.type == 'fit-y')) {\n    log.warn(log.message.containerSizeNotCompatibleWithAutosize('height'));\n  }\n\n  // Delete autosize property if it's Vega's default\n  if (deepEqual(autosize, {type: 'pad'})) {\n    return undefined;\n  }\n\n  return autosize;\n}\n\nexport {NormalizerParams};\n"]}